version: 2.1

orbs:
  aws-eks: circleci/aws-eks@0.2.0
  aws-ecr: circleci/aws-ecr@3.1.0
  kubernetes: circleci/kubernetes@0.3.0

jobs:
  deploy-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      docker-image-name:
        description: |
          Name of the docker image to be deployed
        type: string
      version-info:
        description: |
          App version information
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - checkout
      - run:
          name: Create deployment manifest
          command: |
            # Replace the placeholders in the manifest with the intended values.
            # This is to avoid hardcoding the image name in the manifest, to make this
            # demo project more portable.
            BUILD_DATE=$(date '+%Y%m%d%H%M%S')
            cat deployment/demo-app-deployment.yaml.template |\
               sed "s|DOCKER_IMAGE_NAME|nginx|\
                g;s|BUILD_DATE_VALUE|$BUILD_DATE|g;s|VERSION_INFO_VALUE|\
                latest|g" > deployment/demo-app-deployment.yaml
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: eks_cluster
          install-kubectl: true
          aws-region: eu-central-1
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/demo-app-deployment.yaml"
          get-rollout-status: true
          resource-name: deployment/demoapp
      - kubernetes/create-or-update-resource:
          resource-file-path: "deployment/demo-app-service.yaml"
  test-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
      expected-version-info:
        description: |
          Expected app version (this is used for testing that the
          correct version has been deployed)
        type: string
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: eks_cluster
          install-kubectl: true
          aws-region: eu-central-1
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get pods
            kubectl get services
            sleep 30
            for attempt in {1..20}; do
              EXTERNAL_IP=$(kubectl get service demoapp | awk '{print $4}' | tail -n1)
              echo "Checking external IP: ${EXTERNAL_IP}"
              if [ -n "${EXTERNAL_IP}" ] && [ -z $(echo "${EXTERNAL_IP}" | grep "pending") ]; then
                break
              fi
              echo "Waiting for external IP to be ready: ${EXTERNAL_IP}"
              sleep 10
            done
            sleep 180
            curl -s --retry 10 "http://$EXTERNAL_IP" | grep "0.1"
  undeploy-application:
    executor: aws-eks/python3
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
      aws-region:
        description: |
          AWS region
        type: string
        default: ""
    steps:
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: eks_cluster
          install-kubectl: true
          aws-region: eu-central-1
      - kubernetes/delete-resource:
          resource-types: "deployment,service"
          label-selector: "app=demo"
          wait: true
      - run:
          name: Check on pod status
          command: |
            kubectl get pods
workflows:
  deployment:
    jobs:
      - aws-ecr/build_and_push_image:
          name: build-and-push-image
          account-url: 829804546595.dkr.ecr.eu-central-1.amazonaws.com/eks_orb_demo_app
          region: eu-central-1
          repo: eks_orb_demo_app
          dockerfile: ~/project/demo_app/Dockerfile
          path: ~/project/demo_app
          tag: 0.1
          # Uncomment if the repository does not yet exist
          # create-repo: true
      - aws-eks/create-cluster:
          cluster-name: eks-orb-demo-app-deployment
          aws-region: eu-central-1
          requires:
            - build-and-push-image
      - deploy-application:
          cluster-name: eks-orb-demo-app-deployment
          aws-region: eu-central-1
          docker-image-name: "829804546595.dkr.ecr.eu-central-1.amazonaws.com/eks_orb_demo_app:0.1"
          version-info: "0.1"
          requires:
            - aws-eks/create-cluster
      - test-application:
          name: test-application
          cluster-name: eks-orb-demo-app-deployment
          aws-region: eu-central-1
          expected-version-info: "0.1"
          requires:
            - deploy-application
